
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.sumaparser.parser;

import com.cesar31.sumaparser.ast.Operation;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SumaParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SumaParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SumaParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SumaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SumaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\007\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\003" +
    "\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\015\000\006\004\004\007\010\001\002\000\012\002" +
    "\ufffc\005\ufffc\006\ufffc\010\ufffc\001\002\000\012\002\uffff" +
    "\005\uffff\006\015\010\uffff\001\002\000\012\002\ufffd\005" +
    "\ufffd\006\ufffd\010\ufffd\001\002\000\006\002\017\005\013" +
    "\001\002\000\006\004\004\007\010\001\002\000\006\005" +
    "\013\010\012\001\002\000\012\002\ufffb\005\ufffb\006\ufffb" +
    "\010\ufffb\001\002\000\006\004\004\007\010\001\002\000" +
    "\012\002\001\005\001\006\015\010\001\001\002\000\006" +
    "\004\004\007\010\001\002\000\012\002\ufffe\005\ufffe\006" +
    "\ufffe\010\ufffe\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\015\000\010\002\006\003\004\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\010\003\004\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\013\004\005" +
    "\001\001\000\002\001\001\000\004\004\015\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SumaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SumaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SumaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public SumaParser(SumaLex lex) {
		super(lex);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SumaParser$actions {
  private final SumaParser parser;

  /** Constructor */
  CUP$SumaParser$actions(SumaParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SumaParser$do_action_part00000000(
    int                        CUP$SumaParser$act_num,
    java_cup.runtime.lr_parser CUP$SumaParser$parser,
    java.util.Stack            CUP$SumaParser$stack,
    int                        CUP$SumaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SumaParser$result;

      /* select the action based on the action number */
      switch (CUP$SumaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // E ::= E PLUS T 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.elementAt(CUP$SumaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.elementAt(CUP$SumaParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$SumaParser$stack.elementAt(CUP$SumaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$SumaParser$stack.peek()).value;
		 RESULT = new Operation("+", l, r); 
              CUP$SumaParser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SumaParser$stack.elementAt(CUP$SumaParser$top-2)), ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()), RESULT);
            }
          return CUP$SumaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= E EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.elementAt(CUP$SumaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.elementAt(CUP$SumaParser$top-1)).right;
		Operation start_val = (Operation)((java_cup.runtime.Symbol) CUP$SumaParser$stack.elementAt(CUP$SumaParser$top-1)).value;
		RESULT = start_val;
              CUP$SumaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SumaParser$stack.elementAt(CUP$SumaParser$top-1)), ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SumaParser$parser.done_parsing();
          return CUP$SumaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= T 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()).right;
		Operation i = (Operation)((java_cup.runtime.Symbol) CUP$SumaParser$stack.peek()).value;
		 RESULT = i; 
              CUP$SumaParser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()), RESULT);
            }
          return CUP$SumaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // T ::= T TIMES F 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.elementAt(CUP$SumaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.elementAt(CUP$SumaParser$top-2)).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$SumaParser$stack.elementAt(CUP$SumaParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$SumaParser$stack.peek()).value;
		 RESULT = new Operation("*", l, r); 
              CUP$SumaParser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$SumaParser$stack.elementAt(CUP$SumaParser$top-2)), ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()), RESULT);
            }
          return CUP$SumaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // T ::= F 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()).right;
		Operation i = (Operation)((java_cup.runtime.Symbol) CUP$SumaParser$stack.peek()).value;
		 RESULT = i; 
              CUP$SumaParser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()), RESULT);
            }
          return CUP$SumaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // F ::= INTEGER 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SumaParser$stack.peek()).value;
		 RESULT = new Operation("NUM", Integer.valueOf(i.toString())); 
              CUP$SumaParser$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()), RESULT);
            }
          return CUP$SumaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // F ::= LPAREN E RPAREN 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.elementAt(CUP$SumaParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SumaParser$stack.elementAt(CUP$SumaParser$top-1)).right;
		Operation i = (Operation)((java_cup.runtime.Symbol) CUP$SumaParser$stack.elementAt(CUP$SumaParser$top-1)).value;
		 RESULT = i; 
              CUP$SumaParser$result = parser.getSymbolFactory().newSymbol("F",2, ((java_cup.runtime.Symbol)CUP$SumaParser$stack.elementAt(CUP$SumaParser$top-2)), ((java_cup.runtime.Symbol)CUP$SumaParser$stack.peek()), RESULT);
            }
          return CUP$SumaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SumaParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SumaParser$do_action(
    int                        CUP$SumaParser$act_num,
    java_cup.runtime.lr_parser CUP$SumaParser$parser,
    java.util.Stack            CUP$SumaParser$stack,
    int                        CUP$SumaParser$top)
    throws java.lang.Exception
    {
              return CUP$SumaParser$do_action_part00000000(
                               CUP$SumaParser$act_num,
                               CUP$SumaParser$parser,
                               CUP$SumaParser$stack,
                               CUP$SumaParser$top);
    }
}

}
